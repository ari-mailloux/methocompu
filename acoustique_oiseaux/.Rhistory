source("bool.R")
source("ajout_col.R")
source("virgules_latitude.R")
source("site_lat.R")
source("lat_qc.R")
source("regroup.R")
source("compter_faux.R")
source("correction_erreurs.R")
source("format_heure.R")
source("erreur_heure.R")
source("NA_heure.R")
source("time_start.R")
source("time_finish.R")
source("NA_finish.R")
source("creation_tables.R")
source("creation_db.R")
source("requetes_SQL.R")
source("graph_creation.R")
list(
tar_target(
name = fichiers,
command = list.files(pattern = "\\.csv$")
),
tar_target(
dat,
lapply(fichiers, read.csv)
),
tar_target(
donnees_combin,
do.call(rbind, dat)
),
tar_target(
null_en_na,
null_vers_na(donnees_combin)
),
tar_target(
date,
sapply(null_en_na$date_obs, convertir_date)
),
tar_target(
booleen_variable,
sapply(null_en_na$variable, presence)
),
tar_target(
id_obs,
ajouter_ID_obs(null_en_na)
),
tar_target(
projection,
ajouter_projection(id_obs)
)
)
tar_glimpse()
tar_make()
tar_make()
list(
tar_target(
name = fichiers,
command = list.files(pattern = "\\.csv$")
),
tar_target(
dat,
lapply(fichiers, read.csv)
),
tar_target(
donnees_combin,
do.call(rbind, dat)
),
tar_target(
null_en_na,
null_vers_na(donnees_combin)
),
tar_target(
date,
sapply(null_en_na$date_obs, convertir_date)
),
tar_target(
booleen_variable,
sapply(null_en_na$variable, presence)
),
tar_target(
id_obs,
ajouter_ID_obs(null_en_na)
),
tar_target(
projection,
ajouter_projection(id_obs)
)
)
tar_make()
tar_glimpse()
library(targets)
tar_option_set(packages = c("rmarkdown", "dplyr", "RSQLite"))
source("null_vers_na.R")
source("convertir_date.R")
source("bool.R")
source("ajout_col.R")
list(
tar_target(
name = fichiers,
command = list.files(pattern = "\\.csv$")
),
tar_target(
dat,
lapply(fichiers, read.csv)
),
tar_target(
donnees_combin,
do.call(rbind, dat)
),
tar_target(
null_en_na,
null_vers_na(donnees_combin)
),
tar_target(
date,
sapply(null_en_na$date_obs, convertir_date)
),
tar_target(
booleen_variable,
sapply(null_en_na$variable, presence)
),
tar_target(
id_obs,
ajouter_ID_obs(null_en_na)
),
tar_target(
projection,
ajouter_projection(id_obs)
)
)
tar_glimpse()
library(targets)
tar_option_set(packages = c("rmarkdown", "dplyr", "RSQLite"))
source("null_vers_na.R")
source("convertir_date.R")
source("bool.R")
source("ajout_col.R")
list(
tar_target(
name = fichiers,
command = list.files(pattern = "\\.csv$")
),
tar_target(
dat,
lapply(fichiers, read.csv)
),
tar_target(
donnees_combin,
do.call(rbind, dat)
),
tar_target(
null_en_na,
null_vers_na(donnees_combin)
),
tar_target(
date,
sapply(null_en_na$date_obs, convertir_date)
),
tar_target(
booleen_variable,
sapply(null_en_na$variable, presence)
),
tar_target(
id_obs,
ajouter_ID_obs(null_en_na)
),
tar_target(
projection,
ajouter_projection(id_obs)
)
)
tar_glimpse()
tar_make()
#importer base de données dans R
fichiers <- list.files(pattern = "\\.csv$")
dat <- lapply(fichiers, read.csv)
donnees_combinees <- do.call(rbind, dat)
#transformation des NULL en NA
source("null_vers_na.R")
df<-null_vers_na(donnees_combinees)
#normaliser le format des dates dans la base de données
source("convertir_date.R")
df$date_obs<-sapply(df$date_obs, convertir_date)
#transformer la colonne "variable" pour que les données soient en format booléen
source("bool.R")
df$variable<-sapply(df$variable, presence)
## erreur avec la ligne ci-dessus
#changer le titre de la colonne variable pour un terme plus adéquat
names(df)[names(df) == "variable"] <- "presence"
# ajout des colonnes du numéro d'observation (identificateur unique) et du type de projection
source("ajout_col.R")
# Vérifier qu'il y a que des points dans la latitude
source("virgules_latitude.R")
#Vérifier que chaque site a une seule latitude
source("site_lat.R")
#Vérifirer que la latitude se trouve dans le Québec (entre 45 et 63)
source("lat_qc.R")
#Création comb pour avoir seulement les colonnes d'intérêts (car normal que les autres infos soient différentes pour même espèce ex les sites)
comb <- data.frame(df$valid_scientific_name, df$vernacular_en, df$vernacular_fr, df$species, df$kingdom, df$phylum, df$family, df$genus, df$rank)
#regrouper les données par espèce
source("regroup.R")
resultats <- regroup(comb, "df.valid_scientific_name")# On a un dataframe par espèce. On a une liste de dataframes, chaque dataframe est une espèce
doub<-lapply(resultats, duplicated) # Vérifier si les données sont des doublons dans chacun des dataframes (c'est ce qu'on veut, que les infos soient pareilles)
#appliquer la fonction pour compter le nombre de faux (s'il y en a plus qu'un, il y a une erreur)
source("compter_faux.R")
erre<-lapply(doub, compter_faux) #applique la fonction dans la liste
#correction des erreurs
source("correction_erreurs.R")
#Vérifier le format de l'heure d'observation
source("format_heure.R")
resultat_obs<-sapply(df$time_obs,verifier_format_heure)
mistake_obs <- grep(FALSE, resultat_obs)
source("erreur_heure.R") #ne veut pas s'afficher seule...
#Vérifier si les erreurs sont juste des NA
source("NA_heure.R")
#Vérifier le format de la colonne time_start
resultat_start<-sapply(df$time_start,verifier_format_heure)
mistake_start <- grep(FALSE, resultat_start) #il ne marche pas
source("time_start.R")
library(dplyr)
#Vérifier le format de la colonne time_finish
resultat_finish<-sapply(df$time_finish,verifier_format_heure)
mistake_finish <- grep(FALSE, resultat_finish)
source("time_finish.R")
#vérifier si les erreurs sont tout simplement des NA
source("NA_finish.R")
#Changer le nom de la colonne order pour ordre
names(df)[names(df) == "order"] <- "ordre"
##### Separation en tables #####
source("creation_tables.R")
library(RSQLite)
conn<-dbConnect(SQLite(), dbname="accousitque.db")
#Creation de la base de donnees
dbSendQuery(conn, "DROP TABLE effort_e;")
dbSendQuery(conn, "DROP TABLE obs;")
dbSendQuery(conn, "DROP TABLE site;")
dbSendQuery(conn, "DROP TABLE taxo;")
source("creation_db.R")
#Requêtes SQL
source("requetes_SQL.R")
#Création des graphiques
source("graph_creation.R")
dbDisconnect(conn)
library(targets)
tar_option_set(packages = c("rmarkdown", "dplyr", "RSQLite"))
source("null_vers_na.R")
source("convertir_date.R")
source("bool.R")
source("ajout_col.R")
list(
tar_target(
name = fichiers,
command = list.files(pattern = "\\.csv$")
),
tar_target(
dat,
lapply(fichiers, read.csv)
),
tar_target(
donnees_combin,
do.call(rbind, dat)
),
tar_target(
null_en_na,
null_vers_na(donnees_combin)
),
tar_target(
date,
sapply(null_en_na$date_obs, convertir_date)
),
tar_target(
booleen_variable,
sapply(null_en_na$variable, presence)
),
tar_target(
id_obs,
ajouter_ID_obs(null_en_na)
),
tar_target(
projection,
ajouter_projection(id_obs)
)
)
tar_glimpse()
tar_make()
setwd("C:/Users/arian/OneDrive/Documents/Cours université session 5/Méthodes en écologie computationnelle/methocompu/acoustique_oiseaux")
library(targets)
tar_option_set(packages = c("rmarkdown", "dplyr", "RSQLite"))
source("null_vers_na.R")
source("convertir_date.R")
source("bool.R")
source("ajout_col.R")
list(
tar_target(
name = fichiers,
command = list.files(pattern = "\\.csv$")
),
tar_target(
dat,
lapply(fichiers, read.csv)
),
tar_target(
donnees_combin,
do.call(rbind, dat)
),
tar_target(
null_en_na,
null_vers_na(donnees_combin)
),
tar_target(
date,
sapply(null_en_na$date_obs, convertir_date)
),
tar_target(
booleen_variable,
sapply(null_en_na$variable, presence)
)
)
tar_glimpse()
library(targets)
tar_option_set(packages = c("rmarkdown", "dplyr", "RSQLite"))
source("null_vers_na.R")
source("convertir_date.R")
source("bool.R")
source("ajout_col.R")
list(
tar_target(
name = fichiers,
command = list.files(pattern = "\\.csv$")
),
tar_target(
dat,
lapply(fichiers, read.csv)
),
tar_target(
donnees_combin,
do.call(rbind, dat)
),
tar_target(
null_en_na,
null_vers_na(donnees_combin)
),
tar_target(
date,
sapply(null_en_na$date_obs, convertir_date)
),
tar_target(
booleen_variable,
sapply(null_en_na$variable, presence)
)
)
tar_glimpse()
library(targets)
tar_option_set(packages = c("rmarkdown", "dplyr", "RSQLite"))
source("null_vers_na.R")
source("convertir_date.R")
source("bool.R")
list(
tar_target(
name = fichiers,
command = list.files(pattern = "\\.csv$")
),
tar_target(
dat,
lapply(fichiers, read.csv)
),
tar_target(
donnees_combin,
do.call(rbind, dat)
),
tar_target(
null_en_na,
null_vers_na(donnees_combin)
),
tar_target(
date,
sapply(null_en_na$date_obs, convertir_date)
),
tar_target(
booleen_variable,
sapply(null_en_na$variable, presence)
)
)
tar_glimpse()
tar_make()
library(targets)
tar_option_set(packages = c("rmarkdown", "dplyr", "RSQLite"))
source("null_vers_na.R")
source("convertir_date.R")
source("bool.R")
source("ajout_col.R")
list(
tar_target(
name = fichiers,
command = list.files(pattern = "\\.csv$")
),
tar_target(
dat,
lapply(fichiers, read.csv)
),
tar_target(
donnees_combin,
do.call(rbind, dat)
),
tar_target(
null_en_na,
null_vers_na(donnees_combin)
),
tar_target(
date,
sapply(null_en_na$date_obs, convertir_date)
),
tar_target(
booleen_variable,
sapply(null_en_na$variable, presence)
),
tar_target(
id_obs,
ajouter_ID_obs(null_en_na)
),
tar_target(
projection,
ajouter_projection(id_obs)
)
)
tar_glimpse()
library(targets)
tar_option_set(packages = c("rmarkdown", "dplyr", "RSQLite"))
source("null_vers_na.R")
source("convertir_date.R")
source("bool.R")
source("ajout_col.R")
list(
tar_target(
name = fichiers,
command = list.files(pattern = "\\.csv$")
),
tar_target(
dat,
lapply(fichiers, read.csv)
),
tar_target(
donnees_combin,
do.call(rbind, dat)
),
tar_target(
null_en_na,
null_vers_na(donnees_combin)
),
tar_target(
date,
sapply(null_en_na$date_obs, convertir_date)
),
tar_target(
booleen_variable,
sapply(null_en_na$variable, presence)
),
tar_target(
id_obs,
null_en_na<-ajouter_ID_obs(null_en_na)
),
tar_target(
projection,
ajouter_projection(id_obs)
)
)
tar_glimpse()
library(targets)
tar_option_set(packages = c("rmarkdown", "dplyr", "RSQLite"))
source("null_vers_na.R")
source("convertir_date.R")
source("bool.R")
source("ajout_col.R")
list(
tar_target(
name = fichiers,
command = list.files(pattern = "\\.csv$")
),
tar_target(
dat,
lapply(fichiers, read.csv)
),
tar_target(
donnees_combin,
do.call(rbind, dat)
),
tar_target(
null_en_na,
null_vers_na(donnees_combin)
),
tar_target(
date,
sapply(null_en_na$date_obs, convertir_date)
),
tar_target(
booleen_variable,
sapply(null_en_na$variable, presence)
),
tar_target(
id_obs,
null_en_na<-ajouter_ID_obs(null_en_na)
),
tar_target(
projection,
ajouter_projection(id_obs)
)
)
tar_glimpse()
tar_glimpse
Tar_glimpse()
tar_glimpse()
